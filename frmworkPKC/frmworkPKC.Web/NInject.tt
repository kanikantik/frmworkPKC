<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="VisualStudioHelper.ttinclude" #>
<#@ include file="Manager.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#@ include file="T4Toolbox.tt" #>
<#
    var entityProjectName = "frmworkPKC.Services";
    var excludeNamespaces = new String[] {"frmworkPKC.Services.Interfaces"};
	List<string> namespaces = new List<string>();

    var entityProject = this.VisualStudioHelper.GetProject(entityProjectName);
    foreach(var ns in GetAllNamespacesFromProject(entityProject).OrderBy(s => s))
    {
        if (!namespaces.Contains(ns) && !namespaces.Any(n => ns.StartsWith(n)))
        {
            namespaces.Add(ns);
        }
    }

    // find the matching namespaces from the CodeModel
    List<EnvDTE.CodeNamespace> codeNamespaces = new List<EnvDTE.CodeNamespace>();

    //foreach(EnvDTE.Project project in VisualStudioHelper.GetAllProjects())

    var project = this.VisualStudioHelper.GetProject(entityProjectName);
    if (project.CodeModel != null && project.CodeModel.CodeElements != null)
    {
        foreach(EnvDTE.CodeNamespace codeNs in VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements,
                                                                                                        EnvDTE.vsCMElement.vsCMElementNamespace,
                                                                                                        true))
        {
            if (namespaces.Contains(codeNs.FullName) )
            {
                codeNamespaces.Add(codeNs);
            }
        }
    }
	        List<string> list =   WalkElementsRecursively(codeNamespaces.OfType<EnvDTE.CodeElement>(), 0, excludeNamespaces, entityProjectName, manager);
			var currentNameSpace = GetCurrentNameSpace();			
			SampleDependencyTemplate template = new SampleDependencyTemplate(list, "frmworkPKC.Entities");	
			template.Output.File = @"App_Start\DependencyInjectionConfig.cs";
			template.Output.Project = @"..\frmworkPKC.Web\frmworkPKC.Web.csproj";
			template.Render();			
#>
<#+
    public class SampleDependencyTemplate : Template
    {
		public SampleDependencyTemplate()
        {
			
        }
		List<string> Name;
	
		string CurrentNameSpace;
		public SampleDependencyTemplate(List<string> name, string entityNameSpace)
        {
			this.Name = name;
			this.CurrentNameSpace = entityNameSpace;
        }			  
	
        public override string TransformText()
        {				
			Output.PreserveExistingFile = false;
#>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DependencyInjectionConfig.cs" company="Alliance Global Services">
//   Copyright 2015
// </copyright>
// <summary>
//   The Filter Config.
// </summary>
// --------------------------------------------------------------------------------------------------------------------
using WebActivatorEx;
[assembly: PreApplicationStartMethod(typeof(frmworkPKC.Web.DependencyInjectionConfig), "Start")]
[assembly: ApplicationShutdownMethodAttribute(typeof(frmworkPKC.Web.DependencyInjectionConfig), "Stop")]
namespace frmworkPKC.Web
{
    using System;
    using System.Web;
    using Microsoft.Web.Infrastructure.DynamicModuleHelper;
    using Ninject;
    using Ninject.Web.Common; 
    using global::frmworkPKC.Repository.Pattern.UnitOfWork; 
    using global::frmworkPKC.Repository.Ef6;
    using Entities.Context;
    using global::frmworkPKC.Repository.Pattern.DataContext;    
	using global::frmworkPKC.Common.Logging;
    using global::frmworkPKC.Common.LoggingImplementation; 
    using Controllers;
    using Repository;
    using Services;

    public static class DependencyInjectionConfig
    {
        private static readonly Bootstrapper bootstrapper = new Bootstrapper();

        /// <summary>
        /// Starts the application
        /// </summary>
        public static void Start() 
        {
            DynamicModuleUtility.RegisterModule(typeof(OnePerRequestHttpModule));
            DynamicModuleUtility.RegisterModule(typeof(NinjectHttpModule));
            bootstrapper.Initialize(CreateKernel);
        }
        
        /// <summary>
        /// Stops the application.
        /// </summary>
        public static void Stop()
        {
            bootstrapper.ShutDown();
        }
        
        /// <summary>
        /// Creates the kernel that will manage your application.
        /// </summary>
        /// <returns>The created kernel.</returns>
        private static IKernel CreateKernel()
        {
            var kernel = new StandardKernel();
            try
            {
                kernel.Bind<Func<IKernel>>().ToMethod(ctx => () => new Bootstrapper().Kernel);
                kernel.Bind<IHttpModule>().To<HttpApplicationInitializationHttpModule>();
                RegisterComponents(kernel);
				RegisterRepositories(kernel);
				RegisterServices(kernel);
                return kernel;
            }
            catch
            {
                kernel.Dispose();
                throw;
            }
        }

        /// <summary>
        /// Load your modules or register your services here!
        /// </summary>
        /// <param name="kernel">The kernel.</param>
        private static void RegisterComponents(IKernel kernel)
        { 
            kernel.Bind<IUnitOfWorkAsync>().To<UnitOfWork>(); 
            kernel.Bind<IDataContextAsync>().To<NorthwindDataContext>();
            kernel.Bind<IDataContext>().To<NorthwindDataContext>();  
			kernel.Bind<ILogHelper>().To<NLogLogger>();   
        }
		 
        /// <summary>
        /// Registers the repositories.
        /// </summary>
        /// <param name="kernel">The kernel.</param>
        private static void RegisterRepositories(IKernel kernel)
        {
<#+ foreach(var item in Name)
	{ #>
			kernel.Bind<I<#= item #>Repository>().To<<#= item #>Repository>();
<#+	}#>
        }
        /// <summary>
        /// Registers the services.
        /// </summary>
        /// <param name="kernel">The kernel.</param>
        private static void RegisterServices(IKernel kernel)
        {
<#+ foreach(var item in Name)
	{ #>
			kernel.Bind<I<#= item #>Service>().To<<#= item #>Service>();
<#+	}#>
        }        
    }
}
<#+
            return this.GenerationEnvironment.ToString();
        }
	}
    
//class
/// <summary>
/// Getting namespaces that are defined within a Visual Studio Project via the CodeModel is 
/// buggy, because their InfoLocation Property always returns "vsCMInfoLocationExternal".
/// This is why this method uses the file code model to retrieve namespaces. You can work with these
/// to get classes etc. from the CodeModel.
/// </summary>
public IEnumerable<string> GetAllNamespacesFromProject(EnvDTE.Project project)
{
    List<string> ret = new List<string>();

    // iterate all items contained in the given project
    foreach(EnvDTE.ProjectItem projectItem in VisualStudioHelper.GetAllProjectItems(project))
    {
        // make sure this item provides a file code model
        if (projectItem.FileCodeModel == null) continue;

        // find all code elements in this file
        foreach(EnvDTE.CodeElement elem in projectItem.FileCodeModel.CodeElements)
        {
            if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace)
                ret.Add(elem.FullName);
        }
    }

    return ret;
}

	public List<string> WalkElementsRecursively(IEnumerable<EnvDTE.CodeElement> elements, int recursionDepth, String[] excludeNamespaces, String entityProjectName, Manager manager)
{
	List<string> classNames = new List<string>();
    // iterate all elements
    foreach (EnvDTE.CodeElement element in elements)
    {
        // check if it contains any children
        // bear in mind that namespaces need to be treated differently
        // since their children are stored in the "Members"-Property
        bool hasChildren = false;
        IEnumerable<EnvDTE.CodeElement> children = null;
        if (element is EnvDTE.CodeNamespace)
        {
            try 
            { 
                if(!excludeNamespaces.Contains(element.FullName))
                {
                    children = (element as EnvDTE.CodeNamespace).Members.OfType<EnvDTE.CodeElement>();
                    hasChildren = (children.Count() > 0);
                }
            } catch { return new List<string>(); }
        }
        else
        {
            try 
            { 
                children = element.Children.OfType<EnvDTE.CodeElement>(); 
                hasChildren = (children.Count() > 0); 
            } catch { return new List<string>(); }
        }

        // create the visual elements for this item
        string itemName = "N/A";
        try
        {
            itemName = (element is EnvDTE.CodeNamespace) ? element.FullName : element.FullName.Split('.').Last();			
        } catch { return new List<string>(); }
		         
    if(element.Kind.ToString().Replace("vsCMElement", "")=="Class") 
    {
			var baseClasses = VisualStudioHelper.CodeModel.GetAllImplementedInterfaces(element as EnvDTE.CodeClass).ToList().Select(x => x.Name).ToList();
			if(baseClasses.Any())
			{
			classNames.Add(element.FullName.Split('.').Last().Replace("Service", ""));				
			}
    } 
    // if there is content to be rendered unterneath,
    // use the recursion
    if (hasChildren)
    {
        List<string> list = WalkElementsRecursively(children, recursionDepth + 1, excludeNamespaces, entityProjectName, manager);
		foreach (var item in list)
            {
				classNames.Add(item);
            }
    }
   
  }
  return classNames;
}

/// <summary>
/// Getting the current namespace in the project and returning the namespace
/// </summary>
public string GetCurrentNameSpace()
{
	var visualStudio = (this.Host as IServiceProvider).GetService(typeof( EnvDTE.DTE)) as EnvDTE.DTE;
    var currentProject = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
    return currentProject.Properties.Item("DefaultNamespace").Value.ToString();
}

#>